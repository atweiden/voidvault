/* vim: set filetype=finn foldmethod=marker foldlevel=0 nowrap: */

Void ARM Image Creation
=======================

preamble
--------

### overview

- the odroid-c2 can run linux mainline kernel 4.17+ with u-boot mainline
- archlinuxarm ships pkgs providing this
- this is the initial draft of a script for porting it to void
- voidvault is assumed

### details

research shows odroid-c2 runs on mainline aarch64 linux kernel [1][2]. To
run this kernel, `void-mklive/mkplatformfs.sh:115` leads me to believe
i'll need to:

1. patch void-packages/odroid-c2-base
  > s/odroid-c2-kernel/linux
2. patch void-packages/odroid-c2-uboot
3. create a local repo [3] which contains:
  > my fork of odroid-c2-base
  > my fork of odroid-c2-uboot
4. prepend `-r path/to/binary/repo ` to `XBPS_REPOSITORY` in
  `void-mklive/Makefile`

#### making a custom odroid-c2-uboot xpkg

1. fork from archlinuxarm/uboot-odroid-c2-mainline [4]
2. combine with void-packages/odroid-c2-uboot [5]
3. combine with xypron/u-boot-build [6] and afaerber/meson-tools [7]
   a. xpkg meson-tools based on archlinuxarm/meson-tools [8]

build
-----

```
# switch to root user
sudo su

# turn off cursor blink
echo 0 > /sys/class/graphics/fbcon/cursor_blink

# upgrade system
xbps-install -Suv

# install xbps pkgs for aarch64
_xpkgs=('cross-aarch64-linux-gnu'
        'qemu-user-static')
xbps-install "${_xpkgs[@]}"

# remount /tmp exec
mount --options remount,exec /tmp

# switch to normal user
exit

# get ARM image creation utility
git clone https://github.com/void-linux/void-mklive
cd void-mklive
make
make rootfs-all-print
make platformfs-all-print
make images-all-print

# patch image build scripts to use 0 xz compression (recommended)
# substitute:
# xz -T${COMPRESSOR_THREADS:-0} -9"
# with:
# xz -T${COMPRESSOR_THREADS:-0} -0"
# in:
# mkrootfs.sh mkplatformfs.sh mkimage.sh

# generate ARM image
sudo su
# e.g. make void-aarch64-ROOTFS-20180811.tar.xz
make "$(make rootfs-all-print | grep --color=never aarch64-ROOTFS)"
# e.g. make void-odroid-c2-PLATFORMFS-20180811.tar.xz
make "$(make platformfs-all-print | grep --color=never odroid-c2-PLATFORMFS)"
# e.g. make void-odroid-c2-20180811.img.xz
make "$(make images-all-print | grep --color=never odroid-c2-2)"

# remount /tmp noexec
mount --options remount /tmp

# re-enable journaling [X]
tune2fs -f /dev/mmcblk0p2
```

approaches
----------

approach 1: flash eMMC using pre-flashed SD card
- theory
  - it's not a good idea to enter luks passphrase on host computer
  - it's not a good idea to rewrite void-mklive from scratch
- process
  - install an image onto an SD card [18][19][20]
  - add a blank eMMC module to the system
  - boot from the SD card
  - use the system on the SD card to bootstrap the eMMC
    - change UUID of eMMC so it isn't duplicated from SD card
      - `tune2fs /dev/mmcblk0p2 -U $(uuidgen)`
- advantage
  - only the SD card moves on and off the board
    - prevents wear and tear on eMMC module

approach 2: flash eMMC directly with prebuilt image
- theory
  - it's fine to enter insecure luks passphrase on host computer
    - you can change it later
  - adapt this [10] to void
    - rewrite void-mklive in Raku
    - install necessary pkgs for post-boot script run
- process
  - boot
  - expand filesystem [11][12][13]
    - `sgdisk`
    - `cryptsetup status vault`
    - `cryptsetup resize vault`
    - `btrfs filesystem resize max /dev/mapper/vault`
    - `partprobe || reboot`
    - `resize2fs -p /dev/mmcblk0p2`
  - change fde password [10]
    - `cryptsetup luksChangeKey /dev/mmcblk0p2 --key-slot 0`

notes
-----

voidvault-arm
- *voidvault-arm* feels more directly adapted to _approach 1_
- *voidvault-arm* could also work by repartitioning and installing after
  void-mklive generation
  - it could be as easy as running a script after booting from eMMC
    flashed with void-mklive's .img

disk layout
- odroid-c2 can't handle GPT partitioning [17]

dracut
- dracut's *btrfs* module should specify crc32c-arm64 on aarch64
  processors
  - `instmods crc32c-arm64`

archlinuxarm/u-boot-odroid-c2-mainline
- modify boot.txt with root UUID

eventual system
- /dev/p1: ext4 /boot
- /dev/p2: btrfs on luks /
- mainline kernel
  - with mainline kernel, it is possible to use btrfs with sure footing
- mainline u-boot
  - with mainline u-boot, it is possible to use btrfs for /boot
    - caveat: implementation is read-only, unpolished as of 2018-08-16 [9]
      - read-only doesn't bother me so much as high potential for bugs

mvp
---

- patch void-mklive to include pkgs in platformfs
  - acpi
  - bash
  - bash-completion
  - btrfs-progs
  - bzip2
  - ca-certificates
  - cdrtools
  - chrony
  - coreutils
  - crda
  - cronie
  - cryptsetup
  - curl
  - device-mapper
  - dhclient
  - dhcpcd
  - dialog
  - diffutils
  - dnscrypt-proxy
  - dosfstools
  - dracut
  - dvd+rw-tools
  - e2fsprogs
  - efibootmgr
  - ethtool
  - exfatprogs
  - expect
  - file
  - findutils
  - gawk
  - git
  - glibc
  - gnupg
  - grep
  - gzip
  - haveged
  - inetutils
  - iproute2
  - iputils
  - iw
  - kbd
  - kmod
  - ldns
  - less
  - logrotate
  - lz4
  - man-db
  - man-pages
  - mlocate
  - net-tools
  - nftables
  - openresolv
  - openssh
  - openssl
  - pciutils
  - perl
  - pinentry
  - pinentry-tty
  - procps-ng
  - psmisc
  - rakudo
  - rsync
  - runit-swap
  - runit-void
  - sed
  - shadow
  - socat
  - socklog-void
  - sudo
  - sysfsutils
  - tar
  - tmux
  - tzdata
  - unzip
  - usb-modeswitch
  - usbutils
  - util-linux
  - vim
  - wget
  - which
  - wpa_supplicant
  - xbps
  - xz
  - zip
  - zlib
  - zstd
- accept the ancient unmaintained hardkernel linux3.14 and u-boot for now
- flash .img file created with void-mklive to eMMC
- boot from eMMC
- repartition the disk
  - create a small partition for `mkfs.ext4` /boot
    - make it bootable
    - after it's created, copy over contents from existing /boot
  - create a small partition for `mkfs.btrfs` /
    - this partition can grow later
    - after it's created
      - run cryptsetup on it
      - copy over contents from existing /
        - without
          - /boot
          - pseudofs
          - search [14] for `sudo rsync -av`
            - `--exclude`
  - modify `/boot/boot.ini`
    - `rd.luks.name=$(blkid /dev/mapper/vault)=vault rd.luks.uuid=$(blkid /dev/mapper/vault) root=UUID=$(blkid /dev/sda3)`
      - confirm with normal void system that uuid is identical
- configure u-boot properly for the new partitioning scheme

eventually
----------

- learn to compile mainline kernel from source with correct options [15]
  - the default void-packages/linux-aarch64 kernel should be ok
- learn to compile mainline u-boot from source with correct options [16]
  - this will require adapting archlinuxarm pkgs
- learn to turn this into void packages


******************************************************************************
/* odroid-c2 references */
[1]: https://forum.odroid.com/viewtopic.php?f=135&t=22717&start=800#p218452
[2]: https://baylibre.com/linux-kernel-v4-16-released-contributions/
[3]: https://voidlinux.org/news/2014/01/create-repos.html
[3]: https://wiki.voidlinux.org/XBPS#xbps-rindex
[4]: https://archlinuxarm.org/packages/aarch64/uboot-odroid-c2-mainline/files
[5]: https://github.com/void-linux/void-packages/blob/master/srcpkgs/odroid-c2-uboot
[6]: https://github.com/xypron/u-boot-build/tree/odroid-c2-dev
[7]: https://github.com/afaerber/meson-tools
[8]: https://archlinuxarm.org/packages/aarch64/meson-tools
[N]: https://github.com/repk/gxlimg

/* odroid-c2 kernel mainlining progress */
[N]: http://www.linux-meson.com/
[N]: https://baylibre.com/linux-kernel-v4-16-released-contributions/
[N]: https://forum.odroid.com/viewtopic.php?f=135&t=22717
[N]: https://github.com/umiddelb/armhf/wiki/How-To-compile-a-custom-Linux-kernel-for-your-ARM-device#odroid-c2--khadas-vim-mainline-experimental
[N]: https://github.com/ioft/linux

/* odroid-c2 installation resources */
[N]: https://github.com/xypron/kernel-odroid-c2
[N]: https://github.com/xypron/u-boot-odroid-c2
[N]: https://github.com/xypron/debian-image-odroid-c2
[N]: https://github.com/tokland/arch-bootstrap
[N]: https://github.com/superna9999/meta-meson
[X]: http://chezphil.org/norway/
[Y]: http://chezphil.org/norway/files/zram
[N]: http://seafile.servator.de/sbc/odroid/next/odroid-c2-kernel-4.1x-mainline-install.txt
[N]: https://www.youtube.com/watch?v=EZLdp1NUnPA
[N]: https://magazine.odroid.com/odroid-c2
[N]: https://forum.odroid.com/viewtopic.php?f=138&t=19452
[N]: https://wiki.parabola.nu/ARM_Installation_Guide

/* odroid-c2 fde resources */
[N]: https://magazine.odroid.com/article/install-archlinux-full-disk-encryption-odroid-c2/
[N]: https://github.com/armbian/build/issues/947
[N]: https://github.com/armbian/build/pull/948
[N]: https://github.com/armbian/build/pull/1069

/* odroid-c2 post-installation resources */
[Z]: https://wiki.voidlinux.org/Frequently_Asked_Questions#..._do_I_set_up_my_locale.3F

/* odroid-c2 kernel config notes */
[N]: https://github.com/umiddelb/armhf/wiki/How-To-compile-a-custom-Linux-kernel-for-your-ARM-device
[N]: https://blog.hypriot.com/post/getting-docker-running-on-a-high-density-armv8-server-from-hisilicon/
[N]: https://github.com/gg7/gentoo-kernel-guide
[N]: https://github.com/jollheef/jollheef-overlay/tree/43a84b4226728e976efeed28406e1e555a439889/sys-kernel/linux
[N]: https://github.com/0xdc/kconfig
[N]: https://archlinuxarm.org/forum/viewtopic.php?f=65&t=11092

/* odroid-c2 notes */
[9]: https://github.com/u-boot/u-boot/blob/92e738f5556a63f14360a9a628e36eeb66c9a7bf/fs/btrfs/Kconfig
[10]: https://yesday.github.io/os-image-for-odroid-c2-featuring-archlinux-luks-full-disk-encryption-and-remote-unlocking.html
[11]: https://github.com/yesday/odroid-c2-archlinux-luks/blob/master/usr/local/bin/expand-filesystem-luks
[12]: https://falstaff.agner.ch/2013/12/22/online-resize-root-filesystem-on-a-gpt-partition/
[12]: https://www.novell.com/support/kb/doc.php?id=7018329
[12]: https://superuser.com/questions/660309/live-resize-of-a-gpt-partition-on-linux/1160251#1160251
[13]: https://serverfault.com/questions/394902/resizing-a-luks-encrypted-volume/394903#394903
[13]: https://wiki.archlinux.org/index.php/Resizing_LVM-on-LUKS#Enlarge_LVM_on_LUKS
[13]: https://www.youtube.com/watch?v=MELYA68qQyo
[14]: https://yesday.github.io/blog/2017/how-to-install-archlinux-with-full-disk-encryption-on-odroid-c2.html
[15]: https://github.com/armbian/build/blob/master/config/kernel/linux-meson64-next.config
[16]: https://github.com/armbian/build/blob/master/config/bootscripts/boot-odroid-c2-next.cmd
[17]: https://en.opensuse.org/HCL:OdroidC2
[18]: http://odroid.com/dokuwiki/doku.php?id=en:odroid_flashing_tools
[19]: https://github.com/nachoparker/ddsd
[20]: https://github.com/foundObjects/sbc-flasher
[N]: https://archlinuxarm.org/platforms/armv8/amlogic/odroid-c2
[N]: https://wiki.linaro.org/LEG/ServerArchitecture/GRUB
[N]: https://github.com/armbian/build/blob/master/config/sources/odroidc2.conf
