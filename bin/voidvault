#!/usr/bin/env raku
use v6;
use Voidvault;
use Voidvault::Config::Utils;
use Voidvault::ConfigArgs::Constants;
use Voidvault::ConfigArgs::Utils;
use Voidvault::Utils;


# -----------------------------------------------------------------------------
# disable-cow
# -----------------------------------------------------------------------------

multi sub MAIN(
    'disable-cow',
    Bool :c(:$clean),
    Str :g(:$group),
    Str :p(:$permissions),
    Bool :r(:$recursive),
    Str :u(:$user),
    *@directory ($, *@)
    --> Nil
)
{
    Voidvault::ConfigArgs::Utils.ensure-requirements($Voidvault::ConfigArgs::Constants::SUBJECT-DISABLE-COW);
    my %opts;
    %opts<clean> = $clean if $clean;
    %opts<group> = $group if $group;
    %opts<permissions> = $permissions if $permissions;
    %opts<recursive> = $recursive if $recursive;
    %opts<user> = $user if $user;
    Voidvault::Utils.disable-cow(@directory, |%opts);
}


# -----------------------------------------------------------------------------
# gen-pass-hash
# -----------------------------------------------------------------------------

multi sub MAIN(
    'gen-pass-hash',
    Str:D :p(:$pass)! where .so,
    Bool:D :g(:$grub)! where .so
    --> Nil
)
{
    Voidvault::ConfigArgs::Utils.ensure-requirements($Voidvault::ConfigArgs::Constants::SUBJECT-GEN-PASS-HASH-GRUB);
    say(gen-pass-hash($pass, :$grub));
}

multi sub MAIN(
    'gen-pass-hash',
    Str:D :p(:$pass)! where .so,
    Bool :g(:$grub)
    --> Nil
)
{
    Voidvault::ConfigArgs::Utils.ensure-requirements($Voidvault::ConfigArgs::Constants::SUBJECT-GEN-PASS-HASH);
    say(gen-pass-hash($pass, :$grub));
}

multi sub MAIN(
    'gen-pass-hash',
    Bool:D :g(:$grub)! where .so,
    Str :p(:pass($))
    --> Nil
)
{
    Voidvault::ConfigArgs::Utils.ensure-requirements($Voidvault::ConfigArgs::Constants::SUBJECT-GEN-PASS-HASH-GRUB);
    say(prompt-pass-hash(:$grub));
}

multi sub MAIN(
    'gen-pass-hash',
    Bool :g(:grub($)),
    Str :p(:pass($))
    --> Nil
)
{
    Voidvault::ConfigArgs::Utils.ensure-requirements($Voidvault::ConfigArgs::Constants::SUBJECT-GEN-PASS-HASH);
    say(prompt-pass-hash());
}


# -----------------------------------------------------------------------------
# help
# -----------------------------------------------------------------------------

multi sub MAIN('help', Str:D $subject where 'disable-cow' --> Nil)
{
    USAGE($subject);
}

multi sub MAIN('help', Str:D $subject where 'gen-pass-hash' --> Nil)
{
    USAGE($subject);
}

multi sub MAIN('help', Str:D $subject where 'ls' --> Nil)
{
    USAGE($subject);
}

multi sub MAIN('help', Str:D $subject where 'new' --> Nil)
{
    USAGE($subject);
}

multi sub MAIN('help', $? --> Nil)
{
    USAGE();
}


# -----------------------------------------------------------------------------
# new
# -----------------------------------------------------------------------------

multi sub MAIN('new', Str $mode?, *%opts --> Nil)
{
    %opts<mode> = $mode if $mode;
    Voidvault.new(|%opts);
}


# -----------------------------------------------------------------------------
# ls
# -----------------------------------------------------------------------------

multi sub MAIN('ls', 'devices' --> Nil)
{
    Voidvault::ConfigArgs::Utils.ensure-requirements($Voidvault::ConfigArgs::Constants::SUBJECT-LS-DEVICES);
    Voidvault::Utils.ls-devices.map({ .say });
}

multi sub MAIN('ls', 'keymaps' --> Nil)
{
    Voidvault::ConfigArgs::Utils.ensure-requirements($Voidvault::ConfigArgs::Constants::SUBJECT-LS-KEYMAPS);
    Voidvault::Utils.ls-keymaps.map({ .say });
}

multi sub MAIN('ls', 'locales' --> Nil)
{
    Voidvault::ConfigArgs::Utils.ensure-requirements($Voidvault::ConfigArgs::Constants::SUBJECT-LS-LOCALES);
    Voidvault::Utils.ls-locales.map({ .say });
}

multi sub MAIN('ls', 'timezones' --> Nil)
{
    Voidvault::ConfigArgs::Utils.ensure-requirements($Voidvault::ConfigArgs::Constants::SUBJECT-LS-TIMEZONES);
    Voidvault::Utils.ls-timezones.map({ .say });
}


# -----------------------------------------------------------------------------
# version
# -----------------------------------------------------------------------------

multi sub MAIN(Bool:D :version($)! where .so --> Nil)
{
    printf("v%s\n", $Voidvault::VERSION);
    exit(0);
}


# -----------------------------------------------------------------------------
# usage
# -----------------------------------------------------------------------------

multi sub USAGE(--> Nil)
{
    Voidvault::ConfigArgs::Utils.USAGE();
}

multi sub USAGE(Str:D $subject where 'disable-cow' --> Nil)
{
    Voidvault::ConfigArgs::Utils.USAGE(:$subject);
}

multi sub USAGE(Str:D $subject where 'gen-pass-hash' --> Nil)
{
    Voidvault::ConfigArgs::Utils.USAGE(:$subject);
}

multi sub USAGE(Str:D $subject where 'ls' --> Nil)
{
    Voidvault::ConfigArgs::Utils.USAGE(:$subject);
}

multi sub USAGE(Str:D $subject where 'new' --> Nil)
{
    Voidvault::ConfigArgs::Utils.USAGE(:$subject);
}

# vim: set filetype=raku foldmethod=marker foldlevel=0:
